package com.example.demo.fisco;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Committee extends Contract {
    public static final String[] BINARY_ARRAY = {"","ffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610d3c57600080fd5b505af1158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d749190810190611c86565b604051908082528060200260200182016040528015610da757816020015b6060815260200190600190039081610d925790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e469190810190611c86565b604051908082528060200260200182016040528015610e7957816020015b6060815260200190600190039081610e645790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610ee557600080fd5b505af1158015610ef9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f1d9190810190611c86565b821215611227578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f79919061202c565b602060405180830381600087803b158015610f9357600080fd5b505af1158015610fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fcb9190810190611c34565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110209061211e565b600060405180830381600087803b15801561103a57600080fd5b505af115801561104e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506110779190810190611cf0565b858381518110151561108557fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110e5906120c9565b600060405180830381600087803b1580156110ff57600080fd5b505af1158015611113573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061113c9190810190611cf0565b848381518110151561114a57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111aa90612173565b600060405180830381600087803b1580156111c457600080fd5b505af11580156111d8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506112019190810190611cf0565b838381518110151561120f57fe5b90602001906020020181905250816001019150610e81565b8484849a509a509a5050505050505050509250925092565b6060806060600080600060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600d81526020017f636f6d6d697474656574657374000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112fc9190612047565b602060405180830381600087803b15801561131657600080fd5b505af115801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061134e9190810190611c5d565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156113b457600080fd5b505af11580156113c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113ec9190810190611be2565b96508773ffffffffffffffffffffffffffffffffffffffff1663e8434e398d896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611445929190612069565b602060405180830381600087803b15801561145f57600080fd5b505af1158015611473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114979190810190611c0b565b95508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156114fd57600080fd5b505af1158015611511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115359190810190611c86565b60405190808252806020026020018201604052801561156857816020015b60608152602001906001900390816115535790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156115cf57600080fd5b505af11580156115e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116079190810190611c86565b60405190808252806020026020018201604052801561163a57816020015b60608152602001906001900390816116255790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116d99190810190611c86565b60405190808252806020026020018201604052801561170c57816020015b60608152602001906001900390816116f75790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561177857600080fd5b505af115801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117b09190810190611c86565b821215611aba578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161180c919061202c565b602060405180830381600087803b15801561182657600080fd5b505af115801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061185e9190810190611c34565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118b39061211e565b600060405180830381600087803b1580156118cd57600080fd5b505af11580156118e1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061190a9190810190611cf0565b858381518110151561191857fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611978906120c9565b600060405180830381600087803b15801561199257600080fd5b505af11580156119a6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506119cf9190810190611cf0565b84838151811015156119dd57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a3d90612173565b600060405180830381600087803b158015611a5757600080fd5b505af1158015611a6b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611a949190810190611cf0565b8383815181101515611aa257fe5b90602001906020020181905250816001019150611714565b8484849a509a509a5050505050505050509193909250565b6000611ade8251612286565b905092915050565b6000611af28251612298565b905092915050565b6000611b0682516122aa565b905092915050565b6000611b1a82516122bc565b905092915050565b6000611b2e82516122ce565b905092915050565b600082601f8301121515611b4957600080fd5b8135611b5c611b57826121f5565b6121c8565b91508082526020830160208301858383011115611b7857600080fd5b611b838382846122fc565b50505092915050565b600082601f8301121515611b9f57600080fd5b8151611bb2611bad826121f5565b6121c8565b91508082526020830160208301858383011115611bce57600080fd5b611bd983828461230b565b50505092915050565b600060208284031215611bf457600080fd5b6000611c0284828501611ad2565b91505092915050565b600060208284031215611c1d57600080fd5b6000611c2b84828501611ae6565b91505092915050565b600060208284031215611c4657600080fd5b6000611c5484828501611afa565b91505092915050565b600060208284031215611c6f57600080fd5b6000611c7d84828501611b0e565b91505092915050565b600060208284031215611c9857600080fd5b6000611ca684828501611b22565b91505092915050565b600060208284031215611cc157600080fd5b600082013567ffffffffffffffff811115611cdb57600080fd5b611ce784828501611b36565b91505092915050565b600060208284031215611d","0257600080fd5b600082015167ffffffffffffffff811115611d1c57600080fd5b611d2884828501611b8c565b91505092915050565b60008060408385031215611d4457600080fd5b600083013567ffffffffffffffff811115611d5e57600080fd5b611d6a85828601611b36565b925050602083013567ffffffffffffffff811115611d8757600080fd5b611d9385828601611b36565b9150509250929050565b600080600060608486031215611db257600080fd5b600084013567ffffffffffffffff811115611dcc57600080fd5b611dd886828701611b36565b935050602084013567ffffffffffffffff811115611df557600080fd5b611e0186828701611b36565b925050604084013567ffffffffffffffff811115611e1e57600080fd5b611e2a86828701611b36565b9150509250925092565b6000611e3f8261222e565b80845260208401935083602082028501611e5885612221565b60005b84811015611e91578383038852611e73838351611f05565b9250611e7e8261224f565b9150602088019750600181019050611e5b565b508196508694505050505092915050565b611eab816122d8565b82525050565b611eba816122ea565b82525050565b611ec98161227c565b82525050565b6000611eda82612244565b808452611eee81602086016020860161230b565b611ef78161233e565b602085010191505092915050565b6000611f1082612239565b808452611f2481602086016020860161230b565b611f2d8161233e565b602085010191505092915050565b6000600482527f64617461000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600882527f63617465676f72790000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f73746174757300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611ffa8186611e34565b9050818103602083015261200e8185611e34565b905081810360408301526120228184611e34565b9050949350505050565b60006020820190506120416000830184611ec0565b92915050565b600060208201905081810360008301526120618184611f05565b905092915050565b600060408201905081810360008301526120838185611ecf565b90506120926020830184611ea2565b9392505050565b600060408201905081810360008301526120b38185611ecf565b90506120c26020830184611eb1565b9392505050565b600060208201905081810360008301526120e281611f3b565b9050919050565b6000604082019050818103600083015261210281611f3b565b905081810360208301526121168184611ecf565b905092915050565b6000602082019050818103600083015261213781611f72565b9050919050565b6000604082019050818103600083015261215781611f72565b9050818103602083015261216b8184611ecf565b905092915050565b6000602082019050818103600083015261218c81611fa9565b9050919050565b600060408201905081810360008301526121ac81611fa9565b905081810360208301526121c08184611ecf565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156121eb57600080fd5b8060405250919050565b600067ffffffffffffffff82111561220c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006122918261225c565b9050919050565b60006122a38261225c565b9050919050565b60006122b58261225c565b9050919050565b60006122c78261225c565b9050919050565b6000819050919050565b60006122e38261225c565b9050919050565b60006122f58261225c565b9050919050565b82818337600083830152505050565b60005b8381101561232957808201518184015260208101905061230e565b83811115612338576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820f327cbf2858dc0865329ed1419e6cc2362c39f68be79138cf16b6f7132853a276c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","1f19601f82011682018060405250610d169190810190611cf0565b8483815181101515610d2457fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d8490612173565b600060405180830381600087803b158015610d9e57600080fd5b505af1158015610db2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610ddb9190810190611cf0565b8383815181101515610de957fe5b90602001906020020181905250816001019150610a5b565b8484849a509a509a5050505050505050509193909250565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600d81526020017f636f6d6d697474656574657374000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610eca9190612047565b602060405180830381600087803b158015610ee457600080fd5b505af1158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f1c9190810190611c5d565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f8257600080fd5b505af1158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fba9190810190611be2565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161101191906120e9565b600060405180830381600087803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016110989190612193565b600060405180830381600087803b1580156110b257600080fd5b505af11580156110c6573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166309ff42f087846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611121929190612069565b602060405180830381600087803b15801561113b57600080fd5b505af115801561114f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111739190810190611c86565b90507fe7769b56c2afa8e40381956f76b91d9ec19c34c0a81791702fdcae68e35a7271816040516111a4919061202c565b60405180910390a180935050505092915050565b6060806060600080600060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600d81526020017f636f6d6d697474656574657374000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016112759190612047565b602060405180830381600087803b15801561128f57600080fd5b505af11580156112a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112c79190810190611c5d565b97508773ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561132d57600080fd5b505af1158015611341573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506113659190810190611be2565b96508673ffffffffffffffffffffffffffffffffffffffff1663ae763db58d6040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113bc9190612193565b600060405180830381600087803b1580156113d657600080fd5b505af11580156113ea573d6000803e3d6000fd5b505050508773ffffffffffffffffffffffffffffffffffffffff1663d8ac59578e896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611445929190612069565b602060405180830381600087803b15801561145f57600080fd5b505af1158015611473573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114979190810190611c0b565b95508573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156114fd57600080fd5b505af1158015611511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115359190810190611c86565b60405190808252806020026020018201604052801561156857816020015b60608152602001906001900390816115535790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156115cf57600080fd5b505af11580156115e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116079190810190611c86565b60405190808252806020026020018201604052801561163a57816020015b60608152602001906001900390816116255790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156116a157600080fd5b505af11580156116b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116d99190810190611c86565b60405190808252806020026020018201604052801561170c57816020015b60608152602001906001900390816116f75790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663d3e9af5a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561177857600080fd5b505af115801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117b09190810190611c86565b821215611aba578573ffffffffffffffffffffffffffffffffffffffff16633dd2b614836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161180c919061202c565b602060405180830381600087803b15801561182657600080fd5b505af115801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061185e9190810190611c34565b90508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016118b3906120c9565b600060405180830381600087803b1580156118cd57600080fd5b505af11580156118e1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061190a9190810190611cf0565b858381518110151561191857fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119789061211e565b600060405180830381600087803b15801561199257600080fd5b505af11580156119a6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506119cf9190810190611cf0565b84838151811015156119dd57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a3d90612173565b600060405180830381600087803b158015611a5757600080fd5b505af1158015611a6b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250611a949190810190611cf0565b8383815181101515611aa257fe5b90602001906020020181905250816001019150611714565b8484849a509a509a5050505050505050509250925092565b6000611ade8251612286565b905092915050565b6000611af28251612298565b905092915050565b6000611b0682516122aa565b905092915050565b6000611b1a82516122bc565b905092915050565b6000611b2e82516122ce565b905092915050565b600082601f8301121515611b4957600080fd5b8135611b5c611b57826121f5565b6121c8565b91508082526020830160208301858383011115611b7857600080fd5b611b838382846122fc565b50505092915050565b600082601f8301121515611b9f57600080fd5b8151611bb2611bad826121f5565b6121c8565b91508082526020830160208301858383011115611bce57600080fd5b611bd983828461230b565b50505092915050565b600060208284031215611bf457600080fd5b6000611c0284828501611ad2565b91505092915050565b600060208284031215611c1d57600080fd5b6000611c2b84828501611ae6565b91505092915050565b600060208284031215611c4657600080fd5b6000611c5484828501611afa565b91505092915050565b600060208284031215611c6f57600080fd5b6000611c7d84828501611b0e565b91505092915050565b600060208284031215611c9857600080fd5b6000611ca684828501611b22565b91505092915050565b600060208284031215611cc157600080fd5b600082013567ffffffffffffffff811115611cdb57600080fd5b611ce784828501611b36565b91505092915050565b600060208284031215611d","0257600080fd5b600082015167ffffffffffffffff811115611d1c57600080fd5b611d2884828501611b8c565b91505092915050565b60008060408385031215611d4457600080fd5b600083013567ffffffffffffffff811115611d5e57600080fd5b611d6a85828601611b36565b925050602083013567ffffffffffffffff811115611d8757600080fd5b611d9385828601611b36565b9150509250929050565b600080600060608486031215611db257600080fd5b600084013567ffffffffffffffff811115611dcc57600080fd5b611dd886828701611b36565b935050602084013567ffffffffffffffff811115611df557600080fd5b611e0186828701611b36565b925050604084013567ffffffffffffffff811115611e1e57600080fd5b611e2a86828701611b36565b9150509250925092565b6000611e3f8261222e565b80845260208401935083602082028501611e5885612221565b60005b84811015611e91578383038852611e73838351611f05565b9250611e7e8261224f565b9150602088019750600181019050611e5b565b508196508694505050505092915050565b611eab816122d8565b82525050565b611eba816122ea565b82525050565b611ec98161227c565b82525050565b6000611eda82612244565b808452611eee81602086016020860161230b565b611ef78161233e565b602085010191505092915050565b6000611f1082612239565b808452611f2481602086016020860161230b565b611f2d8161233e565b602085010191505092915050565b6000600882527f63617465676f72790000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f64617461000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f73746174757300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611ffa8186611e34565b9050818103602083015261200e8185611e34565b905081810360408301526120228184611e34565b9050949350505050565b60006020820190506120416000830184611ec0565b92915050565b600060208201905081810360008301526120618184611f05565b905092915050565b600060408201905081810360008301526120838185611ecf565b90506120926020830184611ea2565b9392505050565b600060408201905081810360008301526120b38185611ecf565b90506120c26020830184611eb1565b9392505050565b600060208201905081810360008301526120e281611f3b565b9050919050565b6000604082019050818103600083015261210281611f3b565b905081810360208301526121168184611ecf565b905092915050565b6000602082019050818103600083015261213781611f72565b9050919050565b6000604082019050818103600083015261215781611f72565b9050818103602083015261216b8184611ecf565b905092915050565b6000602082019050818103600083015261218c81611fa9565b9050919050565b600060408201905081810360008301526121ac81611fa9565b905081810360208301526121c08184611ecf565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156121eb57600080fd5b8060405250919050565b600067ffffffffffffffff82111561220c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006122918261225c565b9050919050565b60006122a38261225c565b9050919050565b60006122b58261225c565b9050919050565b60006122c78261225c565b9050919050565b6000819050919050565b60006122e38261225c565b9050919050565b60006122f58261225c565b9050919050565b82818337600083830152505050565b60005b8381101561232957808201518184015260208101905061230e565b83811115612338576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058203d0ac18f4c5bc6d3c0410f1967731cd8b863902bd1e55a525537357700f1ef516c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"data\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"}],\"name\":\"selecByStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"category\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECBYSTATUS = "selecByStatus";

    public static final String FUNC_SELECT = "select";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected Committee(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt insert(String category, String data, String status) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(data), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] insert(String category, String data, String status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(data), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String category, String data, String status) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(data), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String category, String status) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] remove(String category, String status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String category, String status) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt selecByStatus(String category, String status) {
        final Function function = new Function(
                FUNC_SELECBYSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] selecByStatus(String category, String status, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECBYSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelecByStatus(String category, String status) {
        final Function function = new Function(
                FUNC_SELECBYSTATUS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(status)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getSelecByStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECBYSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple3<List<String>, List<String>, List<String>> getSelecByStatusOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECBYSTATUS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<List<String>, List<String>, List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue())
                );
    }

    public TransactionReceipt select(String category) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] select(String category, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSelect(String category) {
        final Function function = new Function(
                FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(category)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSelectInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple3<List<String>, List<String>, List<String>> getSelectOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<List<String>, List<String>, List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue())
                );
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Committee load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Committee(contractAddress, client, credential);
    }

    public static Committee deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Committee.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
