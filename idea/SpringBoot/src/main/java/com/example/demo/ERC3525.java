package com;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple8;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ERC3525 extends Contract {
    public static final String[] BINARY_ARRAY = {"","5b087bab9190a3505050565b6000610db782611cd3565b600082815260146020526040902054601380549091908110610dd557fe5b9060005260206000209060060201600101549050919050565b6000610df983610f71565b8210610e175760405162461bcd60e51b81526004016108c99061437c565b6001600160a01b0383166000908152601560205260409020805483908110610e3b57fe5b906000526020600020015490505b92915050565b610e61610e5a611cfb565b848361212d565b61092683838361222e565b60105460ff1690565b6109268383836040518060200160405280600081525061142d565b6000610e9a610c69565b8210610eb85760405162461bcd60e51b81526004016108c990614339565b60138281548110610ec557fe5b9060005260206000209060060201600001549050919050565b60008181526008602052604081205460ff16610ef957600080fd5b5060009081526003602052604090205490565b6000610f1782611cd3565b600082815260146020526040902054601380549091908110610f3557fe5b60009182526020909120600360069092020101546001600160a01b03169050806107a25760405162461bcd60e51b81526004016108c990613d1e565b60006001600160a01b038216610f995760405162461bcd60e51b81526004016108c990613fd0565b506001600160a01b031660009081526015602052604090205490565b6000610fbf6125f8565b9050610a1b84828585612190565b60008381526008602052604090205460ff16610fe857600080fd5b600083815260036020526040902054611036576000838152600960205260409020546001600160a01b0316301461101e57600080fd5b6110288383611e3d565b61103157600080fd5b611059565b6000838152600960205260409020546001600160a01b0316331461105957600080fd5b6000838152600660209081526040909120825161107892840190613383565b50604051839033907f91f0a01575fe7ec6e663cac4a08841de2f6e4ebe8c41fc5b404639eb99c16cad90600090a3505050565b6016546001600160a01b031681565b60006110c584610f0c565b9050806001600160a01b0316836001600160a01b031614156110f95760405162461bcd60e51b81526004016108c990613ec0565b61110a611104611cfb565b85612407565b6111265760405162461bcd60e51b81526004016108c99061405c565b611131848484612606565b50505050565b600f8054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108335780601f1061080857610100808354040283529160200191610833565b60008481526008602052604090205460ff166111b357600080fd5b6001600160a01b0383166111c657600080fd5b60008481526002602090815260408083206001600160a01b038716845290915290205460ff16151582151514156111fc57600080fd5b60008481526003602052604090205433906112275761121b8583611e3d565b61122457600080fd5b50305b6000858152600960205260409020546001600160a01b0382811691161461124d57600080fd5b60008581526002602090815260408083206001600160a01b038816845290915290819020805460ff191685151517905551859033907ff703a954ecd5577de9c26466b87be1632cc8fe39e460f3e26806d5576c01cde6906112b19088908890613c74565b60405180910390a35050505050565b60006112cb82611cd3565b6000828152601460205260409020546013805490919081106112e957fe5b9060005260206000209060060201600201549050919050565b61131461130d611cfb565b83836126fb565b5050565b60008181526008602052604090205460609060ff1661133657600080fd5b600082815260026020908152604080832033845290915290205460ff1661135c57600080fd5b604051829033907fe787ace91906d9994e1a48bdd038012952ed54467f3fd924d191799f8ca9dbc690600090a360008281526001602081815260409283902080548451600294821615610100026000190190911693909304601f810183900483028401830190945283835291929083018282801561141b5780601f106113f05761010080835404028352916020019161141b565b820191906000526020600020905b8154815290600101906020018083116113fe57829003601f168201915b50505050509050919050565b60005490565b61143e611438611cfb565b83612407565b61145a5760405162461bcd60e51b81526004016108c9906141dd565b61113184848484612795565b606061147182611cd3565b606061147b611d90565b6016549091506001600160a01b03166114c75760008151116114ac5760405180602001604052806000815250610992565b806114b684611da2565b604051602001610982929190613b60565b6016546040516344a5a61760e11b81526001600160a01b039091169063894b4c2e906109c79086906004016143be565b600080338760405160200161150d929190613b28565b60408051601f1981840301815291815281516020928301206000818152600890935291205490915060ff161561154257600080fd5b89866115d5576000861161155557600080fd5b5060008181526004602052604081208690553090805b878110156115d257600084815260056020526040812060019161159b610afa6115938c611ed0565b876014612090565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556014919091019060010161156b565b50505b600082815260096020908152604080832080546001600160a01b0319166001600160a01b038616179055600182529091208951611614928b0190613383565b5060008281526002602090815260408083203384528252808320805460ff19166001179055848352600382528083208a905560068252909120855161165b92870190613383565b5061166681836127c8565b6001600160a01b038116600090815260076020908152604080832080548d01905584835260088252808320805460ff1916600190811790915583548452600d909252822084905581540190556116be81838c8c612190565b81336001600160a01b03167fe17d6d5eaafaecb6b29480293b8bf4ee00f62925f52fe5d8326aa8ac74c5f401896040516116f891906143be565b60405180910390a3505098975050505050505050565b60008181526008602052604081205460ff1661172957600080fd5b6000828152600360205260409020541561174257600080fd5b5060009081526004602052604090205490565b60008581526008602052604090205460ff1661177057600080fd5b60008581526003602052604090205484141561178b57600080fd5b600085815260036020526040902054600114156118a1576000858152600960205260409020546001600160a01b031633146117c557600080fd5b600085815260036020908152604080832087905560049091528120839055805b8381101561184457600087815260056020526040812060019161180d610afa61159388611ed0565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055601491909101906001016117e5565b50600086815260096020526040902080546001600160a01b0319163017905561186d3387612591565b61187730876127c8565b5033600090815260076020526040808220805460001901905530825290208054600101905561192e565b6118ab8584611e3d565b6118b457600080fd5b6000858152600960205260409020546001600160a01b031630146118d757600080fd5b600085815260096020526040902080546001600160a01b031916331790556118ff3086612591565b61190933866127c8565b3060009081526007602052604080822080546000190190553382529020805460010190555b84336001600160a01b03167ff165d46f6f937e6c3a047ef01f151d075a9b737b1dfdba9830e9a29b0e27686f866040516112b191906143be565b600061197383611cd3565b5060009182526012602090815260408084206001600160a01b0393909316845291905290205490565b60008281526008602052604081205460ff166119b757600080fd5b5060009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60008181526008602052604090205460609060ff16611a0157600080fd5b60008281526006602090815260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909183018282801561141b5780601f106113f05761010080835404028352916020019161141b565b606080611a74611d90565b6016549091506001600160a01b0316611ad5576000815111611aa55760405180602001604052806000815250611ad0565b80611aaf306127f7565b604051602001611ac0929190613b8e565b6040516020818303038152906040525b611b5f565b601660009054906101000a90046001600160a01b03166001600160a01b031663725fa09c6040518163ffffffff1660e01b815260040160006040518083038186803b158015611b2357600080fd5b505afa158015611b37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b5f919081019061380a565b91505090565b6001600160a01b0391821660009081526015602090815260408083209390941682526002909201909152205460ff1690565b611ba082610dac565b611ba984610dac565b14611bc65760405162461bcd60e51b81526004016108c990613f7d565b60008381526008602052604090205460ff16611be157600080fd5b60008281526008602052604090205460ff16611bfc57600080fd5b611c0e611c0883610f0c565b846127c8565b6000828152600260205260408120600191611c2885610f0c565b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508060076000611c6d86610f0c565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825403925050819055508060076000611ca885610f0c565b6001600160a01b03168152602081019190915260400160002080549091019055610e61610e5a611cfb565b611cdc8161280d565b611cf85760405162461bcd60e51b81526004016108c990613d1e565b50565b3390565b600081815260146020526040902054601380548492908110611d1d57fe5b6000918252602090912060069091020160040180546001600160a01b0319166001600160a01b0392831617905581908316611d5782610f0c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60408051602081019091526000815290","","","5260800190565b6020808252602e908201527f455243333532353a207472616e7366657220746f20746f6b656e20776974682060408201526d191a5999995c995b9d081cdb1bdd60921b606082015260800190565b6020808252602a908201527f455243333532353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252601f908201527f455243333532353a20696e73756666696369656e7420616c6c6f77616e636500604082015260600190565b6020808252602a908201527f455243333532353a20617070726f76652076616c756520746f20746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526022908201527f455243333532353a20617070726f76616c20746f2063757272656e74206f776e60408201526132b960f11b606082015260800190565b6020808252601d908201527f455243333532353a20746f6b656e20616c7265616479206d696e746564000000604082015260600190565b60208082526024908201527f455243333532353a207472616e736665722066726f6d20696e76616c6964206f6040820152633bb732b960e11b606082015260800190565b60208082526033908201527f455243333532353a20636f6e73697374656e7420736c6f74732061726520726560408201527238bab4b932b2103337b9103a3930b739b332b960691b606082015260800190565b6020808252602b908201527f455243333532353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b60208082526021908201527f455243333532353a2063616e6e6f74206d696e74207a65726f20746f6b656e496040820152601960fa1b606082015260800190565b60208082526031908201527f455243333532353a20617070726f76652063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526025908201527f455243333532353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602d908201527f455243333532353a207472616e736665722072656a656374656420627920455260408201526c21999a991aa932b1b2b4bb32b960991b606082015260800190565b60208082526039908201527f455243333532353a20617070726f76652063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000606082015260800190565b60208082526021908201527f455243333532353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526032908201527f455243333532353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b6020808252601a908201527f455243333532353a20617070726f766520746f2063616c6c6572000000000000604082015260600190565b60208082526027908201527f455243333532353a207472616e736665722066726f6d20696e76616c696420746040820152661bdad95b88125160ca1b606082015260800190565b60208082526025908201527f455243333532353a207472616e7366657220746f20696e76616c696420746f6b604082015264195b88125160da1b606082015260800190565b60208082526027908201527f455243333532353a207472616e7366657220746f206e6f6e204552433732315260408201526632b1b2b4bb32b960c91b606082015260800190565b60208082526023908201527f455243333532353a20676c6f62616c20696e646578206f7574206f6620626f756040820152626e647360e81b606082015260800190565b60208082526022908201527f455243333532353a206f776e657220696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b90815260200190565b60ff91909116815260200190565b6040518181016001600160401b03811182821017156143f357600080fd5b604052919050565b60006001600160401b03821115614410578081fd5b50601f01601f191660200190565b60005b83811015614439578181015183820152602001614421565b838111156111315750506000910152565b6001600160a01b0381168114611cf857600080fd5b8015158114611cf857600080fd5b6001600160e01b031981168114611cf857600080fdfea2646970667358221220ac767b4c8a70a965808b06fdab0142bcffef33b322daa1692921d165a03b632c64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","93929190613c5d565b602060405180830381600087803b158015612dc357600080fd5b505af1925050508015612df3575060408051601f3d908101601f19168201909252612df091810190613814565b60015b612e4e573d808015612e21576040519150601f19603f3d011682016040523d82523d6000602084013e612e26565b606091505b508051612e4657604051636381e58960e11b815260040161096190613ebb565b805181602001fd5b6001600160e01b0319166309281b4360e01b1490506125c7565b5060016125c7565b600081815260146020526040812054601380549091908110612e8e57fe5b600091825260208220600560069092020190810154909250905b81811015612ef6576000836005018281548110612ec157fe5b60009182526020808320909101548783526012825260408084206001600160a01b039092168452915281205550600101612ea8565b506109bf60058301600061346f565b600081815260146020526040812054601380549091908110612f2357fe5b6000918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b03948516179055918416815260159091526040812080549091600019820191839083908110612f7757fe5b90600052602060002001549050600083600101600086815260200190815260200160002054905081846000018281548110612fae57fe5b60009182526020808320909101929092558381526001860190915260408082208390558682528120558354849080612fe257fe5b60019003818190600052602060002001600090559055505050505050565b60008181526014602052604090205460138054849290811061301e57fe5b6000918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b03948516179055939091168152601580845260408083208054858552600182810188529285208190559286529082018155825292902090910155565b606082816002808502016001600160401b03811180156130a257600080fd5b506040519080825280601f01601f1916602001820160405280156130cd576020820181803683370190505b509050600360fc1b816000815181106130e257fe5b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061310b57fe5b60200101906001600160f81b031916908160001a905350600160028502015b6001811115611f30576f181899199a1a9b1b9c1cb0b131b232b360811b83600f166010811061315557fe5b1a60f81b82828151811061316557fe5b60200101906001600160f81b031916908160001a90535060049290921c916000190161312a565b6000818152601460205260408120546013805483929081106131aa57fe5b6000918252602082206005600690920201015491505b8181101561323957600084815260146020526040902054601380546001600160a01b038816929081106131ef57fe5b9060005260206000209060060201600501828154811061320b57fe5b6000918252602090912001546001600160a01b0316141561323157600192505050610ee3565b6001016131c0565b506000949350505050565b6020015190565b601380548251600090815260146020908152604080832084905560018401855593909152835160069092027fa574c55cdca3917ddd81e454451fe28e58670b74d18bcf249a4882de2d316e798101928355818501517fa574c55cdca3917ddd81e454451fe28e58670b74d18bcf249a4882de2d316e7a820155928401517fa574c55cdca3917ddd81e454451fe28e58670b74d18bcf249a4882de2d316e7b84015560608401517fa574c55cdca3917ddd81e454451fe28e58670b74d18bcf249a4882de2d316e7c840180546001600160a01b039283166001600160a01b03199182161790915560808601517fa574c55cdca3917ddd81e454451fe28e58670b74d18bcf249a4882de2d316e7d8601805491909316911617905560a084015180518594610f44937fa574c55cdca3917ddd81e454451fe28e58670b74d18bcf249a4882de2d316e7e90910192019061348d565b3b63ffffffff16151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106133ea57805160ff1916838001178555613417565b82800160010185558215613417579182015b828111156134175782518255916020019190600101906133fc565b506134239291506134ee565b5090565b6040518060c0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b508054600082559060005260206000209081019061241c91906134ee565b8280548282559060005260206000209081019282156134e2579160200282015b828111156134e257825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906134ad565b50613423929150613508565b61070691905b8082111561342357600081556001016134f4565b61070691905b808211156134235780546001600160a01b031916815560010161350e565b80356001600160a01b0381168114610ee357600080fd5b600082601f830112613553578081fd5b813561356661356182614421565b6143fb565b915080825283602082850101111561357d57600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156135a7578081fd5b610b2b838361352c565b600080604083850312156135c3578081fd5b6135cd848461352c565b91506135dc846020850161352c565b90509250929050565b6000806000606084860312156135f9578081fd5b833561360481614470565b9250602084013561361481614470565b929592945050506040919091013590565b6000806000806080858703121561363a578081fd5b613644868661352c565b9350613653866020870161352c565b92506040850135915060608501356001600160401b03811115613674578182fd5b61368087828801613543565b91505092959194509250565b6000806040838503121561369e578182fd5b6136a8848461352c565b915060208301356136b881614485565b809150509250929050565b600080604083850312156136d5578182fd5b6136df848461352c565b946020939093013593505050565b600080600060608486031215613701578283fd5b61370b858561352c565b95602085013595506040909401359392505050565b600080600080600080600080610100898b03121561373c578384fd5b6137468a8a61352c565b9750602089013596506040890135955060608901356001600160401b038082111561376f578586fd5b61377b8c838d01613543565b965060808b0135955060a08b0135945060c08b013591508082111561379e578384fd5b6137aa8c838d01613543565b935060e08b01359150808211156137bf578283fd5b506137cc8b828c01613543565b9150509295985092959890939650565b6000602082840312156137ed578081fd5b8151610b2b81614485565b600060208284031215613809578081fd5b8135610b2b81614493565b600060208284031215613825578081fd5b8151610b2b81614493565b600060208284031215613841578081fd5b81516001600160401b03811115613856578182fd5b80830184601f820112613867578283fd5b8051915061387761356183614421565b82815285602084840101111561388b578384fd5b61389c836020830160208501614444565b95945050505050565b6000602082840312156138b6578081fd5b5035919050565b600080604083850312156138cf578182fd5b823591506135dc846020850161352c565b600080600080608085870312156138f5578182fd5b84359350602085013561390781614470565b9250604085013561391781614485565b915060608501356001600160401b03811115613674578182fd5b600080600060608486031215613945578081fd5b83359250613956856020860161352c565b9150604084013590509250925092565b60008060408385031215613978578182fd5b8235915060208301356001600160401b03811115613994578182fd5b6139a085828601613543565b9150509250929050565b6000806000606084860312156139be578081fd5b8335925060208401356001600160401b03808211156139db578283fd5b6139e787838801613543565b935060408601359150808211156139fc578283fd5b50613a0986828701613543565b9150509250925092565b60008060008060808587031215613a28578182fd5b8435935060208501356001600160401b0380821115613a45578384fd5b613a5188838901613543565b9450604087013593506060870135915080821115613a6d578283fd5b5061368087828801613543565b600080600080600060a08688031215613a91578283fd5b853594506020860135935060408601356001600160401b0380821115613ab5578485fd5b613ac189838a01613543565b9450606088013593506080880135915080821115613add578283fd5b50613aea88828901613543565b9150509295509295909350565b600080600060608486031215613b0b578081fd5b505081359360208301359350604090920135919050565b60008151808452613b3a816020860160208601614444565b601f01601f19169290920160200192915050565b60006bffffffffffffffffffffffff198460601b1682528251613b78816014850160208701614444565b919091016014019392505050565b60008351613b98818460208801614444565b8351908301613bab828260208801614444565b01949350505050565b60008351613bc6818460208801614444565b80830168636f6e74726163742f60b81b815284519150613bed826009830160208801614444565b01600901949350505050565b60008351613c0b818460208801614444565b80830164736c6f742f60d81b815284519150613c2e826005830160208801614444565b01600501949350505050565b6261626360e81b815260030190565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613c9090830184613b22565b9695505050505050565b6001600160a01b039290921682521515602082015260400190565b600060018060a01b038716825285602083015284604083015283606083015260a06080830152613ce860a0830184613b22565b979650505050505050565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6001600160e01b031991909116815260200190565b600060208252610b2b6020830184613b22565b60208082526022908201527f455243333532353a20617070726f76616c20746f2063757272656e74206f776e60408201526132b960f11b606082015260800190565b60208082526039908201527f455243333532353a20617070726f","76652063616c6c6572206973206e6f74206f60408201527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000606082015260800190565b60208082526022908201527f455243333532353a206f776e657220696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526025908201527f455243333532353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526031908201527f455243333532353a20617070726f76652063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f455243333532353a207472616e7366657220746f20746f6b656e20776974682060408201526d191a5999995c995b9d081cdb1bdd60921b606082015260800190565b6020808252602a908201527f455243333532353a20617070726f76652076616c756520746f20746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526033908201527f455243333532353a20636f6e73697374656e7420736c6f74732061726520726560408201527238bab4b932b2103337b9103a3930b739b332b960691b606082015260800190565b60208082526021908201527f455243333532353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252601a908201527f455243333532353a20617070726f766520746f2063616c6c6572000000000000604082015260600190565b60208082526021908201527f455243333532353a2063616e6e6f74206d696e74207a65726f20746f6b656e496040820152601960fa1b606082015260800190565b60208082526019908201527f455243333532353a20696e76616c696420746f6b656e20494400000000000000604082015260600190565b60208082526025908201527f455243333532353a207472616e7366657220746f20696e76616c696420746f6b604082015264195b88125160da1b606082015260800190565b6020808252601f908201527f455243333532353a20696e73756666696369656e7420616c6c6f77616e636500604082015260600190565b60208082526027908201527f455243333532353a207472616e736665722066726f6d20696e76616c696420746040820152661bdad95b88125160ca1b606082015260800190565b6020808252602d908201527f455243333532353a207472616e736665722072656a656374656420627920455260408201526c21999a991aa932b1b2b4bb32b960991b606082015260800190565b60208082526027908201527f455243333532353a207472616e7366657220746f206e6f6e204552433732315260408201526632b1b2b4bb32b960c91b606082015260800190565b60208082526032908201527f455243333532353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b6020808252602a908201527f455243333532353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243333532353a20676c6f62616c20696e646578206f7574206f6620626f756040820152626e647360e81b606082015260800190565b60208082526024908201527f455243333532353a207472616e736665722066726f6d20696e76616c6964206f6040820152633bb732b960e11b606082015260800190565b6020808252602b908201527f455243333532353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252601d908201527f455243333532353a20746f6b656e20616c7265616479206d696e746564000000604082015260600190565b90815260200190565b60ff91909116815260200190565b6040518181016001600160401b038111828210171561441957600080fd5b604052919050565b60006001600160401b03821115614436578081fd5b50601f01601f191660200190565b60005b8381101561445f578181015183820152602001614447565b83811115610f445750506000910152565b6001600160a01b038116811461241c57600080fd5b801515811461241c57600080fd5b6001600160e01b03198116811461241c57600080fdfea2646970667358221220e597d4e3cb2bcdc6d4a7fc11ade546c4cf25184ee615b6cf2f4c924f3da2ddc064736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ApprovalValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"DataNFTOffLine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"DeployContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_visitor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"GetHashIPFS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_dataType\",\"type\":\"uint256\"}],\"name\":\"MintDataNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newType\",\"type\":\"uint256\"}],\"name\":\"SetDataType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"SetHashIPFS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"metadataDescriptor\",\"type\":\"address\"}],\"name\":\"SetMetadataDescriptor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"SetRelatedInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"SetSigInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_visitor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"SetVisitor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_oldSlot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newSlot\",\"type\":\"uint256\"}],\"name\":\"SlotChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Tranfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferValue\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_hashIPFS\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_dataType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sigNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_sigAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_relatedInfo\",\"type\":\"string\"}],\"name\":\"_mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_signs\",\"type\":\"string\"}],\"name\":\"dataOffLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDataType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getHashIPFS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRelatedInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSigNum\",\"outputs\":[{\"int","ernalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_visitor\",\"type\":\"address\"}],\"name\":\"isVisitor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataDescriptor\",\"outputs\":[{\"internalType\":\"contract IERC3525MetadataDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dataType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_signs\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_sigNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_sigAddress\",\"type\":\"string\"}],\"name\":\"setDataType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_newHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_signs\",\"type\":\"string\"}],\"name\":\"setHashIPFS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_signs\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_relatedInfo\",\"type\":\"string\"}],\"name\":\"setRelatedInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_signs\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_sigNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_sigAddress\",\"type\":\"string\"}],\"name\":\"setSigInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_visitor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_signs\",\"type\":\"string\"}],\"name\":\"setVisitor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"slotOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot_\",\"type\":\"uint256\"}],\"name\":\"slotURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDataSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferDataFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC__MINT = "_mint";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_CONTRACTURI = "contractURI";

    public static final String FUNC_DATAOFFLINE = "dataOffLine";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETDATATYPE = "getDataType";

    public static final String FUNC_GETHASHIPFS = "getHashIPFS";

    public static final String FUNC_GETRELATEDINFO = "getRelatedInfo";

    public static final String FUNC_GETSIGNUM = "getSigNum";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISVISITOR = "isVisitor";

    public static final String FUNC_METADATADESCRIPTOR = "metadataDescriptor";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETDATATYPE = "setDataType";

    public static final String FUNC_SETHASHIPFS = "setHashIPFS";

    public static final String FUNC_SETRELATEDINFO = "setRelatedInfo";

    public static final String FUNC_SETSIGINFO = "setSigInfo";

    public static final String FUNC_SETVISITOR = "setVisitor";

    public static final String FUNC_SLOTOF = "slotOf";

    public static final String FUNC_SLOTURI = "slotURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALDATASUPPLY = "totalDataSupply";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERDATAFROM = "transferDataFrom";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_VALUEDECIMALS = "valueDecimals";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event APPROVALVALUE_EVENT = new Event("ApprovalValue", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DATANFTOFFLINE_EVENT = new Event("DataNFTOffLine", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event DEPLOYCONTRACT_EVENT = new Event("DeployContract", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event GETHASHIPFS_EVENT = new Event("GetHashIPFS", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event MINTDATANFT_EVENT = new Event("MintDataNFT", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETDATATYPE_EVENT = new Event("SetDataType", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SETHASHIPFS_EVENT = new Event("SetHashIPFS", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event SETMETADATADESCRIPTOR_EVENT = new Event("SetMetadataDescriptor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SETRELATEDINFO_EVENT = new Event("SetRelatedInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event SETSIGINFO_EVENT = new Event("SetSigInfo", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event SETVISITOR_EVENT = new Event("SetVisitor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SLOTCHANGED_EVENT = new Event("SlotChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANFER_EVENT = new Event("Tranfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANSFERVALUE_EVENT = new Event("TransferValue", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    protected ERC3525(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVAL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApprovalEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVAL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalForAllEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApprovalForAllEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ApprovalValueEventResponse> getApprovalValueEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALVALUE_EVENT, transactionReceipt);
        ArrayList<ApprovalValueEventResponse> responses = new ArrayList<ApprovalValueEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalValueEventResponse typedResponse = new ApprovalValueEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalValueEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALVALUE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApprovalValueEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALVALUE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DataNFTOffLineEventResponse> getDataNFTOffLineEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DATANFTOFFLINE_EVENT, transactionReceipt);
        ArrayList<DataNFTOffLineEventResponse> responses = new ArrayList<DataNFTOffLineEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DataNFTOffLineEventResponse typedResponse = new DataNFTOffLineEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDataNFTOffLineEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DATANFTOFFLINE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDataNFTOffLineEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DATANFTOFFLINE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DeployContractEventResponse> getDeployContractEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPLOYCONTRACT_EVENT, transactionReceipt);
        ArrayList<DeployContractEventResponse> responses = new ArrayList<DeployContractEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DeployContractEventResponse typedResponse = new DeployContractEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._contract = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDeployContractEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DEPLOYCONTRACT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDeployContractEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DEPLOYCONTRACT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<GetHashIPFSEventResponse> getGetHashIPFSEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GETHASHIPFS_EVENT, transactionReceipt);
        ArrayList<GetHashIPFSEventResponse> responses = new ArrayList<GetHashIPFSEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetHashIPFSEventResponse typedResponse = new GetHashIPFSEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._visitor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeGetHashIPFSEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(GETHASHIPFS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeGetHashIPFSEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(GETHASHIPFS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<MintDataNFTEventResponse> getMintDataNFTEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINTDATANFT_EVENT, transactionReceipt);
        ArrayList<MintDataNFTEventResponse> responses = new ArrayList<MintDataNFTEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintDataNFTEventResponse typedResponse = new MintDataNFTEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._dataType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeMintDataNFTEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(MINTDATANFT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeMintDataNFTEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(MINTDATANFT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetDataTypeEventResponse> getSetDataTypeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETDATATYPE_EVENT, transactionReceipt);
        ArrayList<SetDataTypeEventResponse> responses = new ArrayList<SetDataTypeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetDataTypeEventResponse typedResponse = new SetDataTypeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._newType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetDataTypeEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETDATATYPE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetDataTypeEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETDATATYPE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetHashIPFSEventResponse> getSetHashIPFSEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETHASHIPFS_EVENT, transactionReceipt);
        ArrayList<SetHashIPFSEventResponse> responses = new ArrayList<SetHashIPFSEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetHashIPFSEventResponse typedResponse = new SetHashIPFSEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetHashIPFSEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETHASHIPFS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetHashIPFSEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETHASHIPFS_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetMetadataDescriptorEventResponse> getSetMetadataDescriptorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETMETADATADESCRIPTOR_EVENT, transactionReceipt);
        ArrayList<SetMetadataDescriptorEventResponse> responses = new ArrayList<SetMetadataDescriptorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetMetadataDescriptorEventResponse typedResponse = new SetMetadataDescriptorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.metadataDescriptor = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetMetadataDescriptorEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETMETADATADESCRIPTOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetMetadataDescriptorEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETMETADATADESCRIPTOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetRelatedInfoEventResponse> getSetRelatedInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETRELATEDINFO_EVENT, transactionReceipt);
        ArrayList<SetRelatedInfoEventResponse> responses = new ArrayList<SetRelatedInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetRelatedInfoEventResponse typedResponse = new SetRelatedInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetRelatedInfoEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETRELATEDINFO_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetRelatedInfoEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETRELATEDINFO_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetSigInfoEventResponse> getSetSigInfoEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETSIGINFO_EVENT, transactionReceipt);
        ArrayList<SetSigInfoEventResponse> responses = new ArrayList<SetSigInfoEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetSigInfoEventResponse typedResponse = new SetSigInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetSigInfoEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETSIGINFO_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetSigInfoEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETSIGINFO_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetVisitorEventResponse> getSetVisitorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETVISITOR_EVENT, transactionReceipt);
        ArrayList<SetVisitorEventResponse> responses = new ArrayList<SetVisitorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetVisitorEventResponse typedResponse = new SetVisitorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._visitor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._allowed = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetVisitorEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETVISITOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetVisitorEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETVISITOR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SlotChangedEventResponse> getSlotChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SLOTCHANGED_EVENT, transactionReceipt);
        ArrayList<SlotChangedEventResponse> responses = new ArrayList<SlotChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SlotChangedEventResponse typedResponse = new SlotChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._oldSlot = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._newSlot = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSlotChangedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SLOTCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSlotChangedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SLOTCHANGED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TranferEventResponse> getTranferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANFER_EVENT, transactionReceipt);
        ArrayList<TranferEventResponse> responses = new ArrayList<TranferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TranferEventResponse typedResponse = new TranferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTranferEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTranferEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFER_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferValueEventResponse> getTransferValueEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERVALUE_EVENT, transactionReceipt);
        ArrayList<TransferValueEventResponse> responses = new ArrayList<TransferValueEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferValueEventResponse typedResponse = new TransferValueEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferValueEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERVALUE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferValueEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERVALUE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public TransactionReceipt _mint(String to_, BigInteger slot_, BigInteger value_) {
        final Function function = new Function(
                FUNC__MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(slot_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] _mint(String to_, BigInteger slot_, BigInteger value_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC__MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(slot_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionFor_mint(String to_, BigInteger slot_, BigInteger value_) {
        final Function function = new Function(
                FUNC__MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(slot_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, BigInteger, BigInteger> get_mintAddressUint256Uint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC__MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> get_mintAddressUint256Uint256Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC__MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt _mint(String to_, BigInteger slot_, BigInteger value_, String _hashIPFS, BigInteger _dataType, BigInteger _sigNum, String _sigAddress, String _relatedInfo) {
        final Function function = new Function(
                FUNC__MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(slot_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hashIPFS), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_dataType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sigNum), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sigAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_relatedInfo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] _mint(String to_, BigInteger slot_, BigInteger value_, String _hashIPFS, BigInteger _dataType, BigInteger _sigNum, String _sigAddress, String _relatedInfo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC__MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(slot_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hashIPFS), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_dataType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sigNum), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sigAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_relatedInfo)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionFor_mint(String to_, BigInteger slot_, BigInteger value_, String _hashIPFS, BigInteger _dataType, BigInteger _sigNum, String _sigAddress, String _relatedInfo) {
        final Function function = new Function(
                FUNC__MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(slot_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_hashIPFS), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_dataType), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sigNum), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sigAddress), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_relatedInfo)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple8<String, BigInteger, BigInteger, String, BigInteger, BigInteger, String, String> get_mintAddressUint256Uint256StringUint256Uint256StringStringInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC__MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple8<String, BigInteger, BigInteger, String, BigInteger, BigInteger, String, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (String) results.get(6).getValue(), 
                (String) results.get(7).getValue()
                );
    }

    public Tuple1<BigInteger> get_mintAddressUint256Uint256StringUint256Uint256StringStringOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC__MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger allowance(BigInteger tokenId_, String operator_) throws ContractException {
        final Function function = new Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(operator_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt approve(String to_, BigInteger tokenId_) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] approve(String to_, BigInteger tokenId_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApprove(String to_, BigInteger tokenId_) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getApproveAddressUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt approve(BigInteger tokenId_, String to_, BigInteger value_) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] approve(BigInteger tokenId_, String to_, BigInteger value_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForApprove(BigInteger tokenId_, String to_, BigInteger value_) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getApproveUint256AddressUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPROVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger balanceOf(String owner_) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger balanceOf(BigInteger tokenId_) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String contractURI() throws ContractException {
        final Function function = new Function(FUNC_CONTRACTURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt dataOffLine(BigInteger _tokenId, String _signs) {
        final Function function = new Function(
                FUNC_DATAOFFLINE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] dataOffLine(BigInteger _tokenId, String _signs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DATAOFFLINE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDataOffLine(BigInteger _tokenId, String _signs) {
        final Function function = new Function(
                FUNC_DATAOFFLINE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getDataOffLineInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DATAOFFLINE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public String getApproved(BigInteger tokenId_) throws ContractException {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getDataType(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETDATATYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt getHashIPFS(BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_GETHASHIPFS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] getHashIPFS(BigInteger _tokenId, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETHASHIPFS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetHashIPFS(BigInteger _tokenId) {
        final Function function = new Function(
                FUNC_GETHASHIPFS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getGetHashIPFSInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETHASHIPFS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<String> getGetHashIPFSOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETHASHIPFS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getRelatedInfo(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETRELATEDINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getSigNum(BigInteger _tokenId) throws ContractException {
        final Function function = new Function(FUNC_GETSIGNUM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean isApprovedForAll(String owner_, String operator_) throws ContractException {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(operator_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public Boolean isVisitor(BigInteger _tokenId, String _visitor) throws ContractException {
        final Function function = new Function(FUNC_ISVISITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_visitor)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String metadataDescriptor() throws ContractException {
        final Function function = new Function(FUNC_METADATADESCRIPTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String name() throws ContractException {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String ownerOf(BigInteger tokenId_) throws ContractException {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt safeTransferFrom(String from_, String to_, BigInteger tokenId_) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeTransferFrom(String from_, String to_, BigInteger tokenId_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeTransferFrom(String from_, String to_, BigInteger tokenId_) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getSafeTransferFromAddressAddressUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt safeTransferFrom(String from_, String to_, BigInteger tokenId_, byte[] data_) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(data_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeTransferFrom(String from_, String to_, BigInteger tokenId_, byte[] data_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(data_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeTransferFrom(String from_, String to_, BigInteger tokenId_, byte[] data_) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(data_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, String, BigInteger, byte[]> getSafeTransferFromAddressAddressUint256BytesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue()
                );
    }

    public TransactionReceipt setApprovalForAll(String operator_, Boolean approved_) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(operator_), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setApprovalForAll(String operator_, Boolean approved_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(operator_), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetApprovalForAll(String operator_, Boolean approved_) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(operator_), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, Boolean> getSetApprovalForAllInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public TransactionReceipt setDataType(BigInteger _tokenId, BigInteger _dataType, String _signs, BigInteger _sigNum, String _sigAddress) {
        final Function function = new Function(
                FUNC_SETDATATYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_dataType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sigNum), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sigAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setDataType(BigInteger _tokenId, BigInteger _dataType, String _signs, BigInteger _sigNum, String _sigAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETDATATYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_dataType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sigNum), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sigAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetDataType(BigInteger _tokenId, BigInteger _dataType, String _signs, BigInteger _sigNum, String _sigAddress) {
        final Function function = new Function(
                FUNC_SETDATATYPE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_dataType), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sigNum), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sigAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<BigInteger, BigInteger, String, BigInteger, String> getSetDataTypeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETDATATYPE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<BigInteger, BigInteger, String, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue()
                );
    }

    public TransactionReceipt setHashIPFS(BigInteger _tokenId, String _newHash, String _signs) {
        final Function function = new Function(
                FUNC_SETHASHIPFS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_newHash), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setHashIPFS(BigInteger _tokenId, String _newHash, String _signs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETHASHIPFS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_newHash), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetHashIPFS(BigInteger _tokenId, String _newHash, String _signs) {
        final Function function = new Function(
                FUNC_SETHASHIPFS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_newHash), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getSetHashIPFSInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETHASHIPFS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt setRelatedInfo(BigInteger _tokenId, String _signs, String _relatedInfo) {
        final Function function = new Function(
                FUNC_SETRELATEDINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_relatedInfo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setRelatedInfo(BigInteger _tokenId, String _signs, String _relatedInfo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETRELATEDINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_relatedInfo)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetRelatedInfo(BigInteger _tokenId, String _signs, String _relatedInfo) {
        final Function function = new Function(
                FUNC_SETRELATEDINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_relatedInfo)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, String> getSetRelatedInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETRELATEDINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt setSigInfo(BigInteger _tokenId, String _signs, BigInteger _sigNum, String _sigAddress) {
        final Function function = new Function(
                FUNC_SETSIGINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sigNum), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sigAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setSigInfo(BigInteger _tokenId, String _signs, BigInteger _sigNum, String _sigAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSIGINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sigNum), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sigAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetSigInfo(BigInteger _tokenId, String _signs, BigInteger _sigNum, String _sigAddress) {
        final Function function = new Function(
                FUNC_SETSIGINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_sigNum), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_sigAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<BigInteger, String, BigInteger, String> getSetSigInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSIGINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, String, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt setVisitor(BigInteger _tokenId, String _visitor, Boolean _allowed, String _signs) {
        final Function function = new Function(
                FUNC_SETVISITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_visitor), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(_allowed), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setVisitor(BigInteger _tokenId, String _visitor, Boolean _allowed, String _signs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETVISITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_visitor), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(_allowed), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetVisitor(BigInteger _tokenId, String _visitor, Boolean _allowed, String _signs) {
        final Function function = new Function(
                FUNC_SETVISITOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_tokenId), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_visitor), 
                new org.fisco.bcos.sdk.abi.datatypes.Bool(_allowed), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_signs)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<BigInteger, String, Boolean, String> getSetVisitorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETVISITOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<BigInteger, String, Boolean, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public BigInteger slotOf(BigInteger tokenId_) throws ContractException {
        final Function function = new Function(FUNC_SLOTOF, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String slotURI(BigInteger slot_) throws ContractException {
        final Function function = new Function(FUNC_SLOTURI, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(slot_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String symbol() throws ContractException {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger tokenByIndex(BigInteger index_) throws ContractException {
        final Function function = new Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger tokenOfOwnerByIndex(String owner_, BigInteger index_) throws ContractException {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(index_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String tokenURI(BigInteger tokenId_) throws ContractException {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger totalDataSupply() throws ContractException {
        final Function function = new Function(FUNC_TOTALDATASUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger totalSupply() throws ContractException {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt transferDataFrom(BigInteger fromTokenId_, BigInteger toTokenId_, BigInteger value_) {
        final Function function = new Function(
                FUNC_TRANSFERDATAFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(toTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferDataFrom(BigInteger fromTokenId_, BigInteger toTokenId_, BigInteger value_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERDATAFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(toTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferDataFrom(BigInteger fromTokenId_, BigInteger toTokenId_, BigInteger value_) {
        final Function function = new Function(
                FUNC_TRANSFERDATAFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(toTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getTransferDataFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERDATAFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt transferFrom(BigInteger fromTokenId_, String to_, BigInteger value_) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferFrom(BigInteger fromTokenId_, String to_, BigInteger value_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferFrom(BigInteger fromTokenId_, String to_, BigInteger value_) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getTransferFromUint256AddressUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferFromUint256AddressUint256Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt transferFrom(String from_, String to_, BigInteger tokenId_) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferFrom(String from_, String to_, BigInteger tokenId_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferFrom(String from_, String to_, BigInteger tokenId_) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from_), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(to_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferFromAddressAddressUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt transferFrom(BigInteger fromTokenId_, BigInteger toTokenId_, BigInteger value_) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(toTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] transferFrom(BigInteger fromTokenId_, BigInteger toTokenId_, BigInteger value_, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(toTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferFrom(BigInteger fromTokenId_, BigInteger toTokenId_, BigInteger value_) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(toTokenId_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getTransferFromUint256Uint256Uint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public BigInteger valueDecimals() throws ContractException {
        final Function function = new Function(FUNC_VALUEDECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public static ERC3525 load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ERC3525(contractAddress, client, credential);
    }

    public static ERC3525 deploy(Client client, CryptoKeyPair credential, String name_, String symbol_, BigInteger decimals_) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name_), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(symbol_), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(decimals_)));
        return deploy(ERC3525.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class ApprovalEventResponse {
        public TransactionReceipt.Logs log;

        public String _owner;

        public String _approved;

        public BigInteger _tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public TransactionReceipt.Logs log;

        public String _owner;

        public String _operator;

        public Boolean _approved;
    }

    public static class ApprovalValueEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger _tokenId;

        public String _operator;

        public BigInteger _value;
    }

    public static class DataNFTOffLineEventResponse {
        public TransactionReceipt.Logs log;

        public String _operator;

        public BigInteger _tokenId;
    }

    public static class DeployContractEventResponse {
        public TransactionReceipt.Logs log;

        public String _operator;

        public String _contract;
    }

    public static class GetHashIPFSEventResponse {
        public TransactionReceipt.Logs log;

        public String _visitor;

        public BigInteger _tokenId;
    }

    public static class MintDataNFTEventResponse {
        public TransactionReceipt.Logs log;

        public String _operator;

        public BigInteger _tokenId;

        public BigInteger _dataType;
    }

    public static class SetDataTypeEventResponse {
        public TransactionReceipt.Logs log;

        public String _operator;

        public BigInteger _tokenId;

        public BigInteger _newType;
    }

    public static class SetHashIPFSEventResponse {
        public TransactionReceipt.Logs log;

        public String _operator;

        public BigInteger _tokenId;
    }

    public static class SetMetadataDescriptorEventResponse {
        public TransactionReceipt.Logs log;

        public String metadataDescriptor;
    }

    public static class SetRelatedInfoEventResponse {
        public TransactionReceipt.Logs log;

        public String _operator;

        public BigInteger _tokenId;
    }

    public static class SetSigInfoEventResponse {
        public TransactionReceipt.Logs log;

        public String _operator;

        public BigInteger _tokenId;
    }

    public static class SetVisitorEventResponse {
        public TransactionReceipt.Logs log;

        public String _operator;

        public BigInteger _tokenId;

        public String _visitor;

        public Boolean _allowed;
    }

    public static class SlotChangedEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger _tokenId;

        public BigInteger _oldSlot;

        public BigInteger _newSlot;
    }

    public static class TranferEventResponse {
        public TransactionReceipt.Logs log;

        public String _from;

        public String _to;

        public BigInteger _tokenId;
    }

    public static class TransferEventResponse {
        public TransactionReceipt.Logs log;

        public String _from;

        public String _to;

        public BigInteger _tokenId;
    }

    public static class TransferValueEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;

        public BigInteger _value;
    }
}
